#ifdef THPSENSORMODULE
#include <OpenKNX.h>
#include "SEN-UP1-8xTH.h"
#include <Logic.h>
#include "HardwareDevices.h"
#include "Sensor.h"

#pragma message "Pico Core Version: " ARDUINO_PICO_VERSION_STR 

uint8_t mSerial2Active = false;

void appSetup(bool iSaveSupported);
void appLoop();

void setup()
{
    Serial1.setRX(KNX_UART_RX_PIN);
    Serial1.setTX(KNX_UART_TX_PIN);
    SERIAL_DEBUG.begin(115200);

    
    pinMode(PROG_LED_PIN, OUTPUT);
    digitalWrite(PROG_LED_PIN, HIGH);
    delay(DEBUG_DELAY);
    digitalWrite(PROG_LED_PIN, LOW);


  // pin or GPIO the programming led is connected to. Default is LED_BUILDIN
  knx.ledPin(PROG_LED_PIN);
  // is the led active on HIGH or low? Default is LOW
  knx.ledPinActiveOn(PROG_LED_PIN_ACTIVE_ON);
  // pin or GPIO programming button is connected to. Default is 0
  knx.buttonPin(PROG_BUTTON_PIN);
  // Is the interrupt created in RISING or FALLING signal? Default is RISING
  // knx.buttonPinInterruptOn(PROG_BUTTON_PIN_INTERRUPT_ON);

#ifdef USERDATA_SAVE_SIZE
  // utilize SaveRestore framework from knx-stack, this has to happen BEFORE knx.read()
  knx.setSaveCallback(Logic::onSaveToFlashHandler);
  knx.setRestoreCallback(Logic::onLoadFromFlashHandler);
#endif

  // all MAIN_* parameters are generated by OpenKNXproducer for correct version checking by ETS
  // If you want just a bugfix firmware update without ETS-Application dependency, just increase firmwareRevision.
  // As soon, as you want again a sync between ETS-Application and firmware, set firmwareRevision to 0.
  const uint8_t firmwareRevision = 0;
  OpenKNX::knxRead(MAIN_OpenKnxId, MAIN_ApplicationNumber, MAIN_ApplicationVersion, firmwareRevision);

  appSetup(SAVE_INTERRUPT_PIN);

  // start the framework.
  knx.start();
}

void loop()
{
  // don't delay here to much. Otherwise you might lose packages or mess up the timing with ETS
  knx.loop();

  appLoop();
}
#endif
